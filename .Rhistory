car_num <- add_column(car_num, log_max_power_bhp = log(car_num$max_power_bhp), .after = "max_power_bhp")
car_num <- add_column(car_num, log_engine_CC = log(car_num$engine_CC), .after = "engine_CC")
# coef = 3 indica la lunghezza dei baffi come multipli dell'IQR (porto da 1.5 a 4)
p <- car %>% ggplot(aes(fuel, log_selling_price))+geom_boxplot(coef = 3)+geom_jitter(alpha=0.05)+theme(axis.text.x = element_text(angle = 0, hjust = 1))+stat_summary(fun.y=mean, geom="point", shape=20, size=3, color="red", fill="red")
print(p)
corRatio(car$log_selling_price, car$fuel)
chisq_price_fuel <- chisq.test(car$log_selling_price, car$fuel, simulate.p.value = TRUE)
chisq_price_fuel$statistic
p1 <- car %>% ggplot(aes(owner, log_selling_price))+geom_boxplot(coef = 3)+geom_jitter(alpha=0.05)+theme(axis.text.x = element_text(angle = 0, hjust = 1))+stat_summary(fun.y=mean, geom="point", shape=20, size=3, color="red", fill="red")+theme(axis.text.x = element_text(angle = 20, hjust = 1))
print(p1)
corRatio(car$log_selling_price, car$owner)
chisq_price_owner <- chisq.test(car$log_selling_price, car$owner, simulate.p.value = TRUE)
chisq_price_owner$statistic
car %>% group_by(make) %>% count() %>% arrange(desc(n)) %>% ggplot() + geom_col(aes(x=n,y=reorder(make,n)), show.legend = F)+
labs(title = 'Distribuzione marche di auto ordinate per frequenza assoluta',
subtitle = '',
x= 'Frequenza Assoluta',
y='make')
car %>% ggplot(aes(reorder(make, selling_price, median), selling_price))+geom_boxplot()+geom_jitter(alpha=0.02)+geom_hline(aes(yintercept=median(selling_price)))+coord_flip()+xlab('make (marche ordinate per prezzo mediano)')+ylab('selling_price')+theme(aspect.ratio=1)+scale_y_log10()
car %>% ggplot(aes(transmission, log_selling_price))+geom_boxplot(coef = 3)+geom_jitter(alpha=0.05)+theme(axis.text.x = element_text(angle = 0, hjust = 1))+stat_summary(fun.y=mean, geom="point", shape=20, size=3, color="red", fill="red")
corRatio(car$log_selling_price, car$transmission)
chisq_price_transmission <- chisq.test(car$log_selling_price, car$transmission, simulate.p.value = TRUE)
chisq_price_transmission$statistic
car %>% ggplot(aes(seller_type, log_selling_price))+geom_boxplot(coef = 3)+geom_jitter(alpha=0.05)+theme(axis.text.x = element_text(angle = 0, hjust = 1))+stat_summary(fun.y=mean, geom="point", shape=20, size=3, color="red", fill="red")
corRatio(car$log_selling_price, car$seller_type)
chisq_price_seller_type <- chisq.test(car$log_selling_price, car$seller_type, simulate.p.value = TRUE)
chisq_price_transmission$statistic
# Aggiorno il vettore delle colonne numeriche di car
car_nums_colnames_log <- c('log_age','log_selling_price','km_driven','log_engine_CC','log_max_power_bhp', 'seats')
# Prendo un campione di osservazioni per rendere più agile la rappresentazione grafica:
leggero <- car[sample(nrow(car), 500), ]
# Matrice dei diagrammi di dispersione: (non serve usare le variabili trasformate perchè la correlazione non cambia)
pairs(leggero[, car_nums_colnames_log])
cor(car[ ,car_nums_colnames_log])
ggcorr(car[,car_nums_colnames_log], label = TRUE, label_size = 2.9, hjust = 1, layout.exp = 2)
rm(ls = ())
rm(list = ())
rm(list = ls())
library(readr)
library(tibble)
library(dplyr)
library(stringr)
library(mice)
library(caret)
library(ggcorrplot)
library(GGally) #Per il ggcorr()
library(DiscriMiner) # Per il correlation ratio
library(psych)
library(ggrepel)
library(gridExtra)
library(glmnet)
library(xgboost)
library(readr)
library(tibble)
library(dplyr)
library(stringr)
library(mice)
library(caret)
library(ggcorrplot)
library(GGally) #Per il ggcorr()
library(DiscriMiner) # Per il correlation ratio
library(psych)
library(ggrepel)
library(gridExtra)
library(glmnet)
library(xgboost)
data_path <- "https://raw.githubusercontent.com/giocoal/datasets/main/Car%20details%20v3.csv"
car <- read_csv(data_path, col_types = 'ciiiffff????i')
head(data.frame(car))
View(car)
car <- select(car, -c(torque,mileage))
head(car)
car$selling_price <- car$selling_price*0.01
car <- add_column(car, age = 2021 - car$year, .after = "year")
car <- select(car, -c("year"))
car$max_power[car$max_power == 0 | car$max_power == "bhp"] <- NA
all(grepl("CC", car$engine) == !is.na(car$engine))
#viene TRUE quindi sono tutti consistenti
all((grepl("bhp", car$max_power)) == !is.na(car$max_power))
#viene TRUE quindi sono tutti consistenti
car['engine_CC'] <- parse_number(car$engine)
car['max_power_bhp'] <- parse_number(car$max_power)
car <- select(car, -c('engine', 'max_power'))
car <- add_column(car, make = factor(word(car$name, 1)), .after = "name")
# md.pattern (del pacchetto mice), è una funzione di visualizzazione molto utile
# Permette di vedere la distribuzione di NA nel dataset
md.pattern(car, rotate.names=TRUE)
#numero di righe con almeno un NA (coincide con quanto visto in md.pattern)
# sum(!complete.cases(car))
car <- car[-which(!complete.cases(car)),]
car_nums_colnames <- unlist(lapply(car, is.numeric))
car_num <- car[ , car_nums_colnames]
car_num <- select(car_num, -c('seats'))
summary(car_num)
par(mfrow=c(2,3))
#summary(car_num)
for (i in names(car_num)) {
boxplot(car_num[[i]], xlab = i, main = '')
}
par(mfrow=c(1,1))
par(mfrow=c(2,3))
for (i in names(car_num)) {
boxplot(log(car_num[[i]]), main = '', xlab = i, range = 3)
}
par(mfrow=c(1,1))
car_num <- car_num[car_num$selling_price < 80000, ]
car_num <- car_num[car_num$engine_CC < 3000, ]
car_num <- car_num[car_num$max_power_bhp < 300, ]
car_num <- car_num[car_num$km_driven < 300000 & car_num$km_driven > 1, ]
car <- car[car$selling_price < 80000, ]
car <- car[car$engine_CC < 3000, ]
car <- car[car$max_power_bhp < 300, ]
car <- car[car$km_driven < 300000 & car$km_driven > 1, ]
#str(car, give.attr = F)
summary(car)
#class(car)
#dim(car)
summary(car$selling_price)
car %>% ggplot()+geom_histogram(aes(selling_price, ..density..), bins = 30, )+geom_density(aes(selling_price))+ggtitle('Istogramma di selling_price (prezzo di vendita auto usate)')+xlab('Selling Price')+ylab('Densità')
#hist(car$selling_price,
#     freq = F,
#     main = "Istogramma di selling_price (prezzo di vendita auto usate)",
#     xlab = "Selling Price",
#     ylab = "Densità",
#     breaks = 237
#     )
print(paste("Indice di asimmetria della variabile response selling_price:", skew(car$selling_price), sep = " "))
print(paste("Indice di curtosi della variabile response selling_price:", kurtosi(car$selling_price), sep = " "))
car %>% ggplot()+geom_histogram(aes(selling_price, ..density..), bins = 30, )+geom_density(aes(selling_price))+ggtitle('Istogramma del logaritmo di selling_price (prezzo di vendita auto usate)')+xlab('Selling Price')+ylab('Densità')+scale_x_log10()
print(paste("Indice di asimmetria della variabile response selling_price:", skew(log(car$selling_price)), sep = " "))
print(paste("Indice di curtosi della variabile response selling_price:", kurtosi(log(car$selling_price)), sep = " "))
summary(car_num)
#istogrammi
#par(mfrow=c(2,3))
#for (i in names(car_num)) {
#  hist(car_num[[i]], xlab = i, main = '')
#}
#par(mfrow=c(1,1))
#istogrammi
plot1 <- car_num %>% ggplot()+geom_histogram(aes(age, ..density..), bins=15)+geom_density(aes(age))+ylab('')
#print(plot1)
#plot2 <- car_num %>% ggplot()+geom_histogram(aes(km_driven, ..density..), bins=30#)+geom_density(aes(km_driven))+scale_x_continuous(labels = function(x) format(x, scientific #= T))+theme(axis.text.x = element_text(angle = 10))+ylab('')
plot2 <- car_num %>% ggplot()+geom_histogram(aes(km_driven, ..density..), bins=30)+geom_density(aes(km_driven))+scale_x_continuous(labels = function(x) format(x, scientific = F))+ylab('')
#plot3 <- car_num %>% ggplot()+geom_histogram(aes(seats, ..density..), bins=)+geom_density#(aes(seats))+ylab('')
#print(plot3)
plot4 <- car_num %>% ggplot()+geom_histogram(aes(engine_CC, ..density..), bins=30)+geom_density(aes(engine_CC))+ylab('')
#print(plot4)
plot5 <- car_num %>% ggplot()+geom_histogram(aes(max_power_bhp, ..density..), bins=25)+geom_density(aes(max_power_bhp))+ylab('')
#print(plot5)
grid.arrange(plot1, plot2, plot4, plot5, ncol = 2,
top = "Istogrammi delle distribuzioni delle variabili esplicative quantitative",
left = "Densità"
)
for (i in names(car_num)) {
if (i == 'selling_price'){
next
}
print(paste("Indice di asimmetria di Pearson di",i,":", skew(car_num[[i]]), sep = " "))
}
for (i in names(car_num)) {
if (i == 'selling_price'){
next
}
print(paste("Indice di curtosi di Pearson di",i,":", kurtosi(car_num[[i]]), sep = " "))
}
for (i in names(car_num)) {
if (i == 'selling_price'){
next
}
print(paste("Indice di asimmetria di",i,":", skew(log(car_num[[i]])), sep = " "))
}
for (i in names(car_num)) {
if (i == 'selling_price'){
next
}
print(paste("Indice di curtosi di Pearson di",i,":", kurtosi(log(car_num[[i]])), sep = " "))
}
#istogrammi
#par(mfrow=c(2,3))
#for (i in c('year','selling_price','km_driven','engine(CC)','max_power(bhp)')) {
#  hist(log(car_num[[i]]), xlab = i, main = '')
#}
#par(mfrow=c(1,1))
plot1 <- car_num %>% ggplot()+geom_histogram(aes(age, ..density..), bins=15)+geom_density(aes(age))+ylab('')+scale_x_log10()
#print(plot1)
plot2 <- car_num %>% ggplot()+geom_histogram(aes(km_driven, ..density..), bins=30)+geom_density(aes(km_driven))+theme(axis.text.x = element_text(angle = 10))+ylab('')+scale_x_log10()
#plot3 <- car_num %>% ggplot()+geom_histogram(aes(seats, ..density..), bins=)+geom_density#(aes(seats))+ylab('')+scale_x_log10()
#print(plot3)
plot4 <- car_num %>% ggplot()+geom_histogram(aes(engine_CC, ..density..), bins=30)+geom_density(aes(engine_CC))+ylab('')+scale_x_log10()
#print(plot4)
plot5 <- car_num %>% ggplot()+geom_histogram(aes(max_power_bhp, ..density..), bins=30)+geom_density(aes(max_power_bhp))+ylab('')+scale_x_log10()
#print(plot5)
grid.arrange(plot1, plot2, plot4, plot5, ncol = 2,
top = "Istogrammi delle distribuzioni delle variabili esplicative quantitative \n dopo l'applicazione della trasformazione logaritmica",
left = "Densità"
)
car <- add_column(car, log_selling_price = log(car$selling_price), .after = "selling_price")
car <- add_column(car, log_age = log(car$age), .after = "age")
car <- add_column(car, log_max_power_bhp = log(car$max_power_bhp), .after = "max_power_bhp")
car <- add_column(car, log_engine_CC = log(car$engine_CC), .after = "engine_CC")
car_num <- add_column(car_num, log_selling_price = log(car_num$selling_price), .after = "selling_price")
car_num <- add_column(car_num, log_age = log(car_num$age), .after = "age")
car_num <- add_column(car_num, log_max_power_bhp = log(car_num$max_power_bhp), .after = "max_power_bhp")
car_num <- add_column(car_num, log_engine_CC = log(car_num$engine_CC), .after = "engine_CC")
# coef = 3 indica la lunghezza dei baffi come multipli dell'IQR (porto da 1.5 a 4)
p <- car %>% ggplot(aes(fuel, log_selling_price))+geom_boxplot(coef = 3)+geom_jitter(alpha=0.05)+theme(axis.text.x = element_text(angle = 0, hjust = 1))+stat_summary(fun.y=mean, geom="point", shape=20, size=3, color="red", fill="red")
print(p)
corRatio(car$log_selling_price, car$fuel)
chisq_price_fuel <- chisq.test(car$log_selling_price, car$fuel, simulate.p.value = TRUE)
chisq_price_fuel$statistic
p1 <- car %>% ggplot(aes(owner, log_selling_price))+geom_boxplot(coef = 3)+geom_jitter(alpha=0.05)+theme(axis.text.x = element_text(angle = 0, hjust = 1))+stat_summary(fun.y=mean, geom="point", shape=20, size=3, color="red", fill="red")+theme(axis.text.x = element_text(angle = 20, hjust = 1))
print(p1)
corRatio(car$log_selling_price, car$owner)
chisq_price_owner <- chisq.test(car$log_selling_price, car$owner, simulate.p.value = TRUE)
chisq_price_owner$statistic
car %>% group_by(make) %>% count() %>% arrange(desc(n)) %>% ggplot() + geom_col(aes(x=n,y=reorder(make,n)), show.legend = F)+
labs(title = 'Distribuzione marche di auto ordinate per frequenza assoluta',
subtitle = '',
x= 'Frequenza Assoluta',
y='make')
car %>% ggplot(aes(reorder(make, selling_price, median), selling_price))+geom_boxplot()+geom_jitter(alpha=0.02)+geom_hline(aes(yintercept=median(selling_price)))+coord_flip()+xlab('make (marche ordinate per prezzo mediano)')+ylab('selling_price')+theme(aspect.ratio=1)+scale_y_log10()
car %>% ggplot(aes(transmission, log_selling_price))+geom_boxplot(coef = 3)+geom_jitter(alpha=0.05)+theme(axis.text.x = element_text(angle = 0, hjust = 1))+stat_summary(fun.y=mean, geom="point", shape=20, size=3, color="red", fill="red")
corRatio(car$log_selling_price, car$transmission)
chisq_price_transmission <- chisq.test(car$log_selling_price, car$transmission, simulate.p.value = TRUE)
chisq_price_transmission$statistic
car %>% ggplot(aes(seller_type, log_selling_price))+geom_boxplot(coef = 3)+geom_jitter(alpha=0.05)+theme(axis.text.x = element_text(angle = 0, hjust = 1))+stat_summary(fun.y=mean, geom="point", shape=20, size=3, color="red", fill="red")
corRatio(car$log_selling_price, car$seller_type)
chisq_price_seller_type <- chisq.test(car$log_selling_price, car$seller_type, simulate.p.value = TRUE)
chisq_price_transmission$statistic
# Aggiorno il vettore delle colonne numeriche di car
car_nums_colnames_log <- c('log_age','log_selling_price','km_driven','log_engine_CC','log_max_power_bhp', 'seats')
# Prendo un campione di osservazioni per rendere più agile la rappresentazione grafica:
leggero <- car[sample(nrow(car), 500), ]
# Matrice dei diagrammi di dispersione: (non serve usare le variabili trasformate perchè la correlazione non cambia)
pairs(leggero[, car_nums_colnames_log])
cor(car[ ,car_nums_colnames_log])
ggcorr(car[,car_nums_colnames_log], label = TRUE, label_size = 2.9, hjust = 1, layout.exp = 2)
car_nums_colnames
lm(car$log_selling_price ~ car$log_max_power_bhp)
summary(lm(car$log_selling_price ~ car$log_max_power_bhp))
summary(lm(car$log_selling_price ~ car$log_max_power_bhp + car$log_age))
summary(lm(car$log_selling_price ~ car$log_max_power_bhp + car$log_age + car$km_driven))
summary(lm(car$log_selling_price ~ car$log_max_power_bhp + car$log_age))
summary(lm(car$log_selling_price ~ car$log_max_power_bhp + car$log_age + car$transmission))
summary(lm(car$log_selling_price ~ car$log_max_power_bhp + car$log_age + car$transmission + car$fuel))
plot(car$log_selling_price ~ car$log_max_power_bhp + car$log_age + car$transmission + car$fuel)
plot(car$log_selling_price ~ car$log_max_power_bhp + car$log_age + car$transmission)
summary(lm(car$log_selling_price ~ car$log_max_power_bhp + car$log_age + car$transmission + car$fuel))
set.seed(100)
train_ind<-sample(1:nrow(car),0.8*nrow(car))
train_set<-car[train_ind,]
test_set <-car[-train_ind,]
View(car)
View(car_num)
model_1<-lm(log_selling_price ~.,data = train_set)
summary(model_1)
View(car)
model_1<-lm(log_selling_price ~.,data = train_set[,-1])
summary(model_1)
View(chisq_price_transmission)
View(train_set)
View(test_set)
View(train_set)
model_1<-lm(log_selling_price ~.,data = train_set[,-c(1,3,5)])
summary(model_1)
model_1<-lm(log_selling_price ~.,data = train_set[,-c(1,3,5, 13, 15)])
summary(model_1)
model_1<-lm(log_selling_price ~.,data = train_set[,-c(1,2,3,5, 13, 15)])
summary(model_1)
stepAIC(model_1,direction = "both")
summary(model_1)
library(MASS)
stepAIC(model_1,direction = "both")
model_1<-lm(log_selling_price ~.,data = train_set[,-c(1,2,3,5, 13, 15)])
summary(model_1)
model_1<-lm(log_selling_price ~.,data = train_set)
model_1<-lm(log_selling_price ~.,data = train_set)
summary(model_1)
model_1<-lm(log_selling_price ~.,data = train_set[,-c(1,2,3,5, 13, 15)])
summary(model_1)
stepAIC(model_1,direction = "both")
model_1<-lm(log_selling_price ~ data = train_set[,-c(1,2,3,5, 13, 15)])
summary(lm(car$log_selling_price ~ car$log_max_power_bhp))
summary(lm(car$log_selling_price ~ car$log_max_power_bhp + car$log_age + car$transmission + car$fuel))
summary(lm(car$log_selling_price ~ car$log_max_power_bhp))
plot(car$log_selling_price ~ car$log_max_power_bhp)
model1 <- lm(car$log_selling_price ~ car$log_max_power_bhp))
model1 <- lm(car$log_selling_price ~ car$log_max_power_bhp)
plot(car$log_selling_price ~ car$log_max_power_bhp)
abline(coef(model1))
coef(model1)
plot.new(car$log_selling_price ~ car$log_max_power_bhp)
plot(car$log_selling_price ~ car$log_max_power_bhp)
abline(coef(model1))
prova <- lm(car$log_selling_price ~ car$log_max_power_bhp)
add1(prova, . ~ . + car$log_age + car$km_driven)
add1(prova, . ~ . + car)
add1(prova, . ~ . + car$make + car$log_age)
summary(lm(car$log_selling_price ~ car$log_max_power_bhp + car$make))
summary(lm(car$log_selling_price ~ car$log_max_power_bhp + car$log_age))
modello_completo <- lm(car$log_selling_price ~ ., data=train_set)
modello_completo <- lm(log_selling_price ~ ., data=train_set)
summary(modello_completo)
modello_completo <- lm(log_selling_price ~ ., data=train_set[,-1])
summary(modello_completo)
modello_completo <- lm(log_selling_price ~ ., data=train_set[,-c(1,3,5,13,15)])
summary(modello_completo)
##################################
#sviluppo modello completo non contando colonne non logaritmiche e marca (potrei toglierle prima dello split training e test)
modello_completo <- lm(log_selling_price ~ ., data=train_set[,-c(1,3,5,13,15)])
summary(modello_completo)
##################################
#sviluppo modello completo non contando colonne non logaritmiche e marca (potrei toglierle prima dello split training e test)
modello_completo <- lm(log_selling_price ~ . -make, data=train_set[,-c(1,3,5,13,15)])
summary(modello_completo)
##################################
#sviluppo modello completo non contando colonne non logaritmiche e marca (potrei toglierle prima dello split training e test)
modello_completo <- lm(log_selling_price ~ . , data=train_set[,-c(1,3,5,13,15)])
summary(modello_completo)
##################################
#sviluppo modello completo non contando colonne non logaritmiche e marca (potrei toglierle prima dello split training e test)
modello_completo <- lm(log_selling_price ~ . -log_engine_CC, data=train_set[,-c(1,3,5,13,15)])
summary(modello_completo)
##################################
#sviluppo modello completo non contando colonne non logaritmiche e marca (potrei toglierle prima dello split training e test)
modello_completo <- lm(log_selling_price ~ . , data=train_set[,-c(1,3,5,13,15)])
summary(modello_completo)
##################################
#sviluppo modello completo non contando colonne non logaritmiche e marca (potrei toglierle prima dello split training e test)
modello_completo <- lm(log_selling_price ~ . , data=train_set[,-c(1,3,5,13,15)])
summary(modello_completo)
stepAIC(modello_completo,direction = "both")
library(MASS)
stepAIC(modello_completo,direction = "both")
summary(modello_completo)
car_dummy <- car_num
# Aggiungo la variabile fattoriale 'transmission' a car dummy e la converto in numerica (0 corrispode a 'automatic'):
car_dummy <- cbind(car_dummy,transmission = car$transmission)
levels(car_dummy$transmission)<-c(1,0)
car_dummy$transmission <- as.numeric(levels(car_dummy$transmission))[car_dummy$transmission]
#converto la variabile fattoriale 'make' in dummy e la aggiungo a car_dummy:
dummy_temp <- data.frame(model.matrix( ~make, data = car))[,-1]
car_dummy <-cbind(car_dummy,dummy_temp)
#converto la variabile fattoriale 'fuel' in dummy e la aggiungo a car_dummy:
dummy_temp <- data.frame(model.matrix( ~fuel, data = car))[,-1]
car_dummy <-cbind(car_dummy,dummy_temp)
#converto la variabile fattoriale 'seller_type' in dummy e la aggiungo a car_dummy:
dummy_temp <- data.frame(model.matrix( ~seller_type, data = car))[,-1]
car_dummy <-cbind(car_dummy,dummy_temp)
#converto la variabile fattoriale 'owner' in dummy e la aggiungo a car_dummy:
dummy_temp <- data.frame(model.matrix( ~owner, data = car))[,-1]
car_dummy <-cbind(car_dummy,dummy_temp)
head(car_dummy)
head(car_dummy)
View(car_dummy)
modello_dummy <- lm(log_selling_price ~ . , data=car_dummy[,-c(1,3,6,8)])
summary(modello_dummy)
stepAIC(modello_dummy,direction = "both")
summary(lm(formula = log_selling_price ~ log_age + km_driven + log_engine_CC +
log_max_power_bhp + transmission + makeAudi + makeBMW + makeChevrolet +
makeFord + makeHonda + makeHyundai + makeIsuzu + makeJaguar +
makeJeep + makeLand + makeLexus + makeMahindra + makeMaruti +
makeMercedes.Benz + makeMG + makeMitsubishi + makeNissan +
makeRenault + makeSkoda + makeTata + makeToyota + makeVolkswagen +
makeVolvo + fuelPetrol + fuelLPG + fuelCNG + seller_typeDealer +
ownerSecond.Owner + ownerThird.Owner + ownerFourth...Above.Owner +
ownerTest.Drive.Car, data = car_dummy[, -c(1, 3, 6, 8)]))
summary(model_1)
summary(lm(formula = log_selling_price ~ log_age + km_driven + log_engine_CC +
log_max_power_bhp + transmission + makeAudi + makeBMW + makeChevrolet +
makeFord + makeHonda + makeHyundai + makeIsuzu + makeJaguar +
makeJeep + makeLand + makeLexus + makeMahindra + makeMaruti +
makeMercedes.Benz + makeMG + makeMitsubishi + makeNissan +
makeRenault + makeSkoda + makeTata + makeToyota + makeVolkswagen +
makeVolvo + fuelPetrol + fuelLPG + fuelCNG + seller_typeDealer +
ownerSecond.Owner + ownerThird.Owner + ownerFourth...Above.Owner +
ownerTest.Drive.Car, data = car_dummy[, -c(1, 3, 6, 8)]))
stepAIC(modello_dummy,direction = "both")
stepAIC(modello_dummy,direction = "backward")
summary(lm(formula = log_selling_price ~ log_age + log_max_power_bhp, data = car_dummy[, -c(1, 3, 6, 8)]))
summary(lm(formula = log_selling_price ~ log_age + log_max_power_bhp +makeBMW, data = car_dummy[, -c(1, 3, 6, 8)]))
summary(lm(formula = log_selling_price ~ log_age, data = car_dummy[, -c(1, 3, 6, 8)]))
summary(lm(formula = log_selling_price ~ max_power_bhp, data = car_dummy[, -c(1, 3, 6, 8)]))
summary(lm(formula = log_selling_price ~ log_max_power_bhp, data = car_dummy[, -c(1, 3, 6, 8)]))
summary(lm(formula = log_selling_price ~ ., data = car_dummy[, -c(1, 3, 6, 8)]))
modello_dummy <- lm(log_selling_price ~ . , data=car_dummy[,-c(1,3,6,8)]) #Adjusted R-squared:  0.8912
summary(modello_dummy)
stepAIC(modello_dummy,direction = "backward")
modello_dummy_AIC <-lm(formula = log_selling_price ~ log_age + km_driven + log_engine_CC +
log_max_power_bhp + transmission + makeAudi + makeBMW + makeChevrolet +
makeFord + makeHonda + makeHyundai + makeIsuzu + makeJaguar +
makeJeep + makeLand + makeLexus + makeMahindra + makeMaruti +
makeMercedes.Benz + makeMG + makeMitsubishi + makeNissan +
makeRenault + makeSkoda + makeTata + makeToyota + makeVolkswagen +
makeVolvo + fuelPetrol + fuelLPG + fuelCNG + seller_typeDealer +
ownerSecond.Owner + ownerThird.Owner + ownerFourth...Above.Owner +
ownerTest.Drive.Car, data = car_dummy[, -c(1, 3, 6, 8)])
summary(modello_dummy_AIC)
anova(modello_dummy, modello_dummy_AIC)
modello_dummy_AIC <-lm(formula = log_selling_price ~ log_age + km_driven + log_engine_CC +
log_max_power_bhp + transmission + makeAudi + makeBMW + makeChevrolet +
makeFord + makeHonda + makeHyundai + makeIsuzu + makeJaguar +
makeJeep + makeLand + makeLexus + makeMahindra + makeMaruti +
makeMercedes.Benz + makeMG + makeMitsubishi + makeNissan +
makeRenault + makeSkoda + makeTata + makeToyota + makeVolkswagen +
makeVolvo + fuelPetrol + fuelLPG + fuelCNG + seller_typeDealer +
ownerSecond.Owner + ownerThird.Owner + ownerFourth...Above.Owner, data = car_dummy[, -c(1, 3, 6, 8)])
summary(modello_dummy_AIC) #Adjusted R-squared:  0.8912
modello_vuoto <- lm(log_selling_price ~ 1, data=car_dummy[,-c(1,3,6,8)])
summary(modello_vuoto)
step(modello_vuoto, direction = "forward", scope = formula(modello_completo))
step(modello_vuoto, direction = "forward", scope = formula(modello_dummy))
summary(lm(formula = log_selling_price ~ log_max_power_bhp + log_age +
makeTata + fuelPetrol + transmission + makeToyota + makeChevrolet +
km_driven + makeBMW + makeLexus + makeJaguar + makeMercedes.Benz +
log_engine_CC + makeAudi + makeVolvo + makeMaruti + ownerFourth...Above.Owner +
ownerThird.Owner + ownerSecond.Owner + fuelCNG + makeLand +
makeDatsun + makeFord + makeFiat + makeMahindra + makeVolkswagen +
ownerTest.Drive.Car + seller_typeDealer + fuelLPG + makeKia +
makeOpel + makeSkoda + makeJeep + makeForce + makeDaewoo +
makeHonda, data = car_dummy[, -c(1, 3, 6, 8)]))
step(modello_vuoto, direction = "both", scope = formula(modello_dummy))
summary(modello_forward)
modello_forward <-lm(formula = log_selling_price ~ log_max_power_bhp + log_age +
makeTata + fuelPetrol + transmission + makeToyota + makeChevrolet +
km_driven + makeBMW + makeLexus + makeJaguar + makeMercedes.Benz +
log_engine_CC + makeAudi + makeVolvo + makeMaruti + ownerFourth...Above.Owner +
ownerThird.Owner + ownerSecond.Owner + fuelCNG + makeLand +
makeDatsun + makeFord + makeFiat + makeMahindra + makeVolkswagen +
ownerTest.Drive.Car + seller_typeDealer + fuelLPG + makeKia +
makeOpel + makeSkoda + makeJeep + makeForce + makeDaewoo +
makeHonda, data = car_dummy[, -c(1, 3, 6, 8)])
summary(modello_forward)
anova(modello_dummy_AIC, modello_forward)
modello_vuoto <- lm(log_selling_price ~ log_max_power_bhp, data=car_dummy[,-c(1,3,6,8)])
summary(modello_forward)
step(modello_vuoto, direction = "both", scope = formula(modello_dummy))
summary(lm(log_selling_price ~ log_max_power_bhp + log_age + makeTata +
fuelPetrol + transmission + makeToyota + makeChevrolet +
km_driven))
summary(lm(log_selling_price ~ log_max_power_bhp + log_age + makeTata +
fuelPetrol + transmission + makeToyota + makeChevrolet +
km_driven, data=car_dummy))
#Adjusted R-squared:  0.8626
summary(lm(log_selling_price ~ log_max_power_bhp + log_age +
fuelPetrol + transmission +
km_driven, data=car_dummy))
#Adjusted R-squared:  0.8626
summary(lm(formula = log_selling_price ~ log_max_power_bhp + log_age +
makeTata + fuelPetrol + transmission + makeToyota + makeChevrolet +
km_driven + makeBMW + makeLexus + makeJaguar, data = car_dummy[, -c(1, 3, 6, 8)]))
#Adjusted R-squared:  0.8626
summary(lm(formula = log_selling_price ~ log_max_power_bhp + log_age +
makeTata + fuelPetrol + transmission + makeToyota + makeChevrolet +
km_driven + makeBMW + makeLexus, data = car_dummy[, -c(1, 3, 6, 8)]))
#Adjusted R-squared:  0.8626
summary(lm(formula = log_selling_price ~ log_max_power_bhp + log_age  + fuelPetrol + transmission + makeToyota + makeChevrolet +
km_driven + makeBMW + makeLexus, data = car_dummy[, -c(1, 3, 6, 8)]))
View(car_num)
#creo un nuovo dataframe con gli attributi numerici in forma logaritmica e quelli categoriali come variabili dummy
car_dummy <- car_num[,-c(1,3,6,8)]
car_dummy
stepAIC(modello_vuoto, direction = "both", scope = formula(modello_dummy))
modello_vuoto <- lm(log_selling_price ~ log_max_power_bhp, data=car_dummy)
stepAIC(modello_vuoto, direction = "both", scope = formula(modello_dummy))
library(readr)
library(tibble)
library(dplyr)
library(stringr)
library(mice)
library(caret)
library(ggcorrplot)
library(GGally) #Per il ggcorr()
library(DiscriMiner) # Per il correlation ratio
library(psych)
library(ggrepel)
library(gridExtra)
library(glmnet)
library(xgboost)
data_path <- "https://raw.githubusercontent.com/giocoal/datasets/main/Car%20details%20v3.csv"
car <- read_csv(data_path, col_types = 'ciiiffff????i')
head(data.frame(car))
View(car)
car <- select(car, -c(torque,mileage))
modello_forward <-lm(formula = log_selling_price ~ log_max_power_bhp + log_age +
makeTata + fuelPetrol + transmission + makeToyota + makeChevrolet +
km_driven + makeBMW + makeLexus + makeJaguar + makeMercedes.Benz +
log_engine_CC + makeAudi + makeVolvo + makeMaruti + ownerFourth…Above.Owner +
rm(list = lm())
rm(list = ln())
rm(list = lm())
library(readr)
library(tibble)
library(dplyr)
library(stringr)
library(mice)
library(caret)
library(ggcorrplot)
library(GGally) #Per il ggcorr()
library(DiscriMiner) # Per il correlation ratio
library(psych)
library(ggrepel)
library(gridExtra)
library(glmnet)
library(xgboost)
data_path <- "https://raw.githubusercontent.com/giocoal/datasets/main/Car%20details%20v3.csv"
car <- read_csv(data_path, col_types = 'ciiiffff????i')
head(data.frame(car))
View(car)
car <- select(car, -c(torque,mileage))
car <- select(car, -c(torque,mileage))
View(car)
