# celle prive di numeri in NA
#car['mileage(kmpl)'] <- parse_number(car$mileage)
car['engine(CC)'] <- parse_number(car$engine)
car['max_power(bhp)'] <- parse_number(car$max_power)
# Elimino le colonne con unità di misura usando la funzione select() di dplyr
#car <- select(car, -c('mileage', 'engine', 'max_power'))
car <- select(car, -c('engine', 'max_power'))
# Alternativa è creare una colonna di fattori 0 e 1 che indicano l'unità di misura
# Ma mi sembra un po' eccessivo dato il numero esiguo di unità statistiche
# Uso la funzione word della libreria dplyr
# Uso l'operatore pipes %>% di dplyr e la funzione add_column di tibble per
# aggiungere la nuova colonna dopo la colonna name
car <- add_column(car, make = word(car$name, 1), .after = "name")
# md.pattern (del pacchetto mice), è una funzione di visualizzazione molto utile
# Permette di vedere la distribuzione di NA
# nonchè di classificare le righe in funzione del numero di NA che contengono
md.pattern(car, rotate.names=TRUE)
head(car)
head(car)
data_path <- "https://raw.githubusercontent.com/giocoal/datasets/main/Car%20details%20v3.csv"
car <- read_csv(data_path, col_types = 'ciiiffff????i')
head(data.frame(car))
View(car)
#is_tibble(car) Verifico che il ds sia di tipo tibble
str(car, give.attr = F)
summary(car)
# Uso la funzione word della libreria dplyr
# la funzione add_column di tibble peraggiunge la nuova colonna dopo la colonna name
car <- add_column(car, make = factor(word(car$name, 1)), .after = "name")
head(car)
car <- select(car, -c(torque,mileage))
head(car)
car$max_power[car$max_power == "bhp"] <- NA
#car$max_power[car$max_power == 0 | car$max_power == "bhp"] <- NA
#car$mileage[car$mileage == "0.0 kmpl"] <- NA
#all(grepl("kmpl", car$mileage) == !is.na(car$mileage))
#Viene FALSE perché:
#le macchine a Gas di petrolio liquefatto (LPG) e quelle a Metano (CNG) misurano il mileage in km/kg
all(grepl("CC", car$engine) == !is.na(car$engine))
#viene TRUE quindi sono tutti consistenti
all((grepl("bhp", car$max_power)) == !is.na(car$max_power))
#viene TRUE quindi sono tutti consistenti
# Creo un nuovo attributo dei soli valori privi di unità di misura
# includo l'unità di misura nel nome della variabile
# La funzione parse_number mantiene i NA tali e converte tutte quelle
# celle prive di numeri in NA
#car['mileage(kmpl)'] <- parse_number(car$mileage)
car['engine(CC)'] <- parse_number(car$engine)
car['max_power(bhp)'] <- parse_number(car$max_power)
# Elimino le colonne con unità di misura usando la funzione select() di dplyr
#car <- select(car, -c('mileage', 'engine', 'max_power'))
car <- select(car, -c('engine', 'max_power'))
# Alternativa è creare una colonna di fattori 0 e 1 che indicano l'unità di misura
# Ma mi sembra un po' eccessivo dato il numero esiguo di unità statistiche
head(car)
#numero di righe con almeno un NA
sum(!complete.cases(car))
#Trattandosi di 239 righe possiamo pensare di rimuoverle dato che costituiscono circa il 3% del dataset
#qui bisogna aggiungere la funzione per rimuovere le righe
#car <- car[-which(!complete.cases(car)),]
# md.pattern (del pacchetto mice), è una funzione di visualizzazione molto utile
# Permette di vedere la distribuzione di NA
# nonchè di classificare le righe in funzione del numero di NA che contengono
md.pattern(car, rotate.names=TRUE)
library(readr)
library(tibble)
library(dplyr)
library(stringr)
library(mice)
#library(caret)
#library(ggcorrplot)
#library(ggrepel)
#library(gridExtra)
#library(glmnet)
#library(xgboost)
#library(printr)
#library(lemon)
#knit_print.data.frame <- lemon_print
data_path <- "https://raw.githubusercontent.com/giocoal/datasets/main/Car%20details%20v3.csv"
car <- read_csv(data_path, col_types = 'ciiiffff????i')
head(data.frame(car))
View(car)
#is_tibble(car) Verifico che il ds sia di tipo tibble
str(car, give.attr = F)
summary(car)
car <- select(car, -c(torque,mileage))
head(car)
car$max_power[car$max_power == "bhp"] <- NA
#car$max_power[car$max_power == 0 | car$max_power == "bhp"] <- NA
#car$mileage[car$mileage == "0.0 kmpl"] <- NA
#all(grepl("kmpl", car$mileage) == !is.na(car$mileage))
#Viene FALSE perché:
#le macchine a Gas di petrolio liquefatto (LPG) e quelle a Metano (CNG) misurano il mileage in km/kg
all(grepl("CC", car$engine) == !is.na(car$engine))
#viene TRUE quindi sono tutti consistenti
all((grepl("bhp", car$max_power)) == !is.na(car$max_power))
#viene TRUE quindi sono tutti consistenti
# Creo un nuovo attributo dei soli valori privi di unità di misura
# includo l'unità di misura nel nome della variabile
# La funzione parse_number mantiene i NA tali e converte tutte quelle
# celle prive di numeri in NA
#car['mileage(kmpl)'] <- parse_number(car$mileage)
car['engine(CC)'] <- parse_number(car$engine)
car['max_power(bhp)'] <- parse_number(car$max_power)
# Elimino le colonne con unità di misura usando la funzione select() di dplyr
#car <- select(car, -c('mileage', 'engine', 'max_power'))
car <- select(car, -c('engine', 'max_power'))
# Alternativa è creare una colonna di fattori 0 e 1 che indicano l'unità di misura
# Ma mi sembra un po' eccessivo dato il numero esiguo di unità statistiche
# Uso la funzione word della libreria dplyr
# la funzione add_column di tibble peraggiunge la nuova colonna dopo la colonna name
car <- add_column(car, make = factor(word(car$name, 1)), .after = "name")
# md.pattern (del pacchetto mice), è una funzione di visualizzazione molto utile
# Permette di vedere la distribuzione di NA
# nonchè di classificare le righe in funzione del numero di NA che contengono
md.pattern(car, rotate.names=TRUE)
#numero di righe con almeno un NA
sum(!complete.cases(car))
#Trattandosi di 239 righe possiamo pensare di rimuoverle dato che costituiscono circa il 3% del dataset
#qui bisogna aggiungere la funzione per rimuovere le righe
#car <- car[-which(!complete.cases(car)),]
#numero di righe con almeno un NA
sum(!complete.cases(car))
#Trattandosi di 239 righe possiamo pensare di rimuoverle dato che costituiscono circa il 3% del dataset
#qui bisogna aggiungere la funzione per rimuovere le righe
car <- car[-which(!complete.cases(car)),]
# md.pattern (del pacchetto mice), è una funzione di visualizzazione molto utile
# Permette di vedere la distribuzione di NA
# nonchè di classificare le righe in funzione del numero di NA che contengono
md.pattern(car, rotate.names=TRUE)
class(car)
dim(car)
str(car)
summary(car)
#boxplot
for (i in 1:ncol(car)) {
boxplot(car[,i], main = colnames(car)[i])
}
#boxplot
boxplot(year, sellingprice)
#boxplot
boxplot(year, sellingprice, data = car)
#boxplot
car_num <- select_if(data, is.numeric)
#boxplot
car_num <- select_if(car, is.numeric)
boxplot(car_num)
#for (i in 1:ncol(car)) {
#  boxplot(car[,i], main = colnames(car)[i])
#}
#istogrammi
#for (i in 1:ncol(car)) {
#  hist(car[,i], main = colnames(car)[i])
#}
# Estrazione delle variabili numeriche:
car_nums <- unlist(lapply(car, is.numeric))
# Prendo un campione di osservazioni per rendere più agile la rappresentazione grafica:
leggero <- car[sample(nrow(car), 500), ]
# Matrice dei diagrammi di dispersione:
pairs(leggero[, car_nums])
# Estrazione delle variabili numeriche:
car_nums <- unlist(lapply(car, is.numeric))
# Prendo un campione di osservazioni per rendere più agile la rappresentazione grafica:
leggero <- car[sample(nrow(car), 500), ]
# Matrice dei diagrammi di dispersione:
pairs(leggero)
# Estrazione delle variabili numeriche:
car_nums <- unlist(lapply(car, is.numeric))
# Prendo un campione di osservazioni per rendere più agile la rappresentazione grafica:
leggero <- car[sample(nrow(car), 500), ]
# Matrice dei diagrammi di dispersione:
pairs(leggero[, car_nums])
# Estrazione delle variabili numeriche:
car_nums <- unlist(lapply(car, is.numeric))
# Prendo un campione di osservazioni per rendere più agile la rappresentazione grafica:
leggero <- car[sample(nrow(car), 500), ]
# Matrice dei diagrammi di dispersione:
pairs(leggero[, car_nums])
cor(car[ ,car_nums])
#boxplot
#car_num <- select_if(car, is.numeric)
#for (i in names(car_num))
#boxplot(car_num)
#for (i in 1:ncol(car)) {
#  boxplot(car[,i], main = colnames(car)[i])
#}
#istogrammi
for (i in 1:ncol(car)) {
hist(car[,i], main = colnames(car)[i])
}
#boxplot
#car_num <- select_if(car, is.numeric)
#for (i in names(car_num))
#boxplot(car_num)
#for (i in 1:ncol(car)) {
#  boxplot(car[,i], main = colnames(car)[i])
#}
#istogrammi
for (i in 1:ncol(car_num)) {
hist(car_num[,i], main = colnames(car_num)[i])
}
for (i in names(car_num)) {
hist(car_num[,i], main = colnames(car_num)[i])
}
names(car_num)
for (i in names(car_num)) {
hist(car_num[,i])
}
for (i in names(car_num)) {
hist(car_num[[i]])
}
for (i in names(car)) {
hist(car[[i]], main = colnames(car)[i])
}
#boxplot
#car_num <- select_if(car, is.numeric)
#for (i in names(car_num))
#boxplot(car_num)
#for (i in 1:ncol(car)) {
#  boxplot(car[,i], main = colnames(car)[i])
#}
#istogrammi
for (i in names(car)) {
hist(car[[i]], main = colnames(car)[[i]])
}
for (i in names(car)) {
hist(car[[i]])
}
for (i in names(car_num)) {
hist(car_num[[i]], main = colnames(car_num)[[i]])
}
for (i in names(car_num)) {
hist(car_num[[i]], main = colnames(car_num)[i])
}
colnames(car_num)[1]
colnames(car_num)[year]
colnames(car_num)['year']
#names(car_num)
#car_num %>% gather() %>% head()
colnames(car_num)
for (i in names(car_num)) {
hist(car_num[[i]], main = i)
}
for (i in names(car_num)) {
hist(log(car_num[[i]]), main = i)
}
par(mfrow=(2,3))
par(mfrow=(2,3))
#istogrammi
par(mfrow=c(2,3))
for (i in names(car_num)) {
hist(car_num[[i]]), main = i)
#istogrammi
par(mfrow=c(3,3))
for (i in names(car_num)) {
hist(car_num[[i]]), main = i)
#istogrammi
par(mfrow=c(2,5))
for (i in names(car_num)) {
hist(car_num[[i]]), main = i)
#istogrammi
par(mfrow=c(2,5))
for (i in names(car_num)) {
hist(car_num[[i]]))
#istogrammi
par(mfrow=c(2,5))
for (i in names(car_num)) {
hist(car_num[[i]])
}
par(mfrow=c(1,1))
#istogrammi
par(mfrow=c(2,3))
for (i in names(car_num)) {
hist(car_num[[i]])
}
par(mfrow=c(1,1))
#istogrammi
par(mfrow=c(2,3))
for (i in names(car_num)) {
hist(car_num[[i]], xlab = i)
}
par(mfrow=c(1,1))
#istogrammi
par(mfrow=c(2,3))
for (i in names(car_num)) {
hist(car_num[[i]], xlab = i, main = '')
}
par(mfrow=c(1,1))
#istogrammi
par(mfrow=c(2,2))
for (i in c('selling_price','km_driven','engine(CC)','max_power(bhp)')) {
hist(log(car_num[[i]]), xlab = i, main = '')
}
par(mfrow=c(1,1))
#Boxplot
par(mfrow=c(2,3))
for (i in names(car_num)) {
boxplot(car_num[[i]], xlab = i, main = '')
}
par(mfrow=c(1,1))
#Boxplot
#par(mfrow=c(2,3))
for (i in names(car_num)) {
boxplot(car_num[[i]], xlab = i, main = '')
}
par(mfrow=c(1,1))
#Boxplot
#par(mfrow=c(2,3))
summary(car_num)
for (i in names(car_num)) {
boxplot(car_num[[i]], xlab = i, main = '')
}
par(mfrow=c(1,1))
car$selling_price <- car$selling_price*0.01
# Estrazione delle variabili numeriche:
car_nums <- unlist(lapply(car, is.numeric))
# Prendo un campione di osservazioni per rendere più agile la rappresentazione grafica:
leggero <- car[sample(nrow(car), 500), ]
# Matrice dei diagrammi di dispersione:
pairs(leggero[, car_nums])
cor(car[ ,car_nums])
#istogrammi
par(mfrow=c(2,3))
for (i in names(car_num)) {
hist(car_num[[i]], xlab = i, main = '')
}
par(mfrow=c(1,1))
#istogrammi
par(mfrow=c(2,2))
for (i in c('selling_price','km_driven','engine(CC)','max_power(bhp)')) {
hist(log(car_num[[i]]), xlab = i, main = '')
}
par(mfrow=c(1,1))
#Boxplot
#par(mfrow=c(2,3))
summary(car_num)
for (i in names(car_num)) {
boxplot(car_num[[i]], xlab = i, main = '')
}
par(mfrow=c(1,1))
rm(list=ls())
library(readr)
library(tibble)
library(dplyr)
library(stringr)
library(mice)
#library(caret)
#library(ggcorrplot)
#library(ggrepel)
#library(gridExtra)
#library(glmnet)
#library(xgboost)
#library(printr)
#library(lemon)
#knit_print.data.frame <- lemon_print
data_path <- "https://raw.githubusercontent.com/giocoal/datasets/main/Car%20details%20v3.csv"
car <- read_csv(data_path, col_types = 'ciiiffff????i')
head(data.frame(car))
View(car)
#is_tibble(car) Verifico che il ds sia di tipo tibble
str(car, give.attr = F)
summary(car)
car <- select(car, -c(torque,mileage))
head(car)
car$selling_price <- car$selling_price*0.01
car$max_power[car$max_power == "bhp"] <- NA
#car$max_power[car$max_power == 0 | car$max_power == "bhp"] <- NA
#car$mileage[car$mileage == "0.0 kmpl"] <- NA
#all(grepl("kmpl", car$mileage) == !is.na(car$mileage))
#Viene FALSE perché:
#le macchine a Gas di petrolio liquefatto (LPG) e quelle a Metano (CNG) misurano il mileage in km/kg
all(grepl("CC", car$engine) == !is.na(car$engine))
#viene TRUE quindi sono tutti consistenti
all((grepl("bhp", car$max_power)) == !is.na(car$max_power))
#viene TRUE quindi sono tutti consistenti
# Il numero di auto valore di mileage in kmpl è solo di 88 (contro 7802)
#sum(grepl("kmpl", car$mileage))
#sum(grepl("km/kg", car$mileage))
# Valore coerente con il numero totale di auto a LPG e CNG (95, probabilmente la differenza sono na)
#cat("Numero di auto LPG o CNG:", sum(table(car$fuel)[c(3, 4)]))
# Propongo di non considerare le auto a gpl e cng, dato il numero esiguo di unità statistiche
# e un possibile problema correlato al fatto che queste auto non siano sufficientemente rappresentate
#car <- subset(car, fuel != "LPG" & fuel != "CNG")
# Creo un nuovo attributo dei soli valori privi di unità di misura
# includo l'unità di misura nel nome della variabile
# La funzione parse_number mantiene i NA tali e converte tutte quelle
# celle prive di numeri in NA
#car['mileage(kmpl)'] <- parse_number(car$mileage)
car['engine(CC)'] <- parse_number(car$engine)
car['max_power(bhp)'] <- parse_number(car$max_power)
# Elimino le colonne con unità di misura usando la funzione select() di dplyr
#car <- select(car, -c('mileage', 'engine', 'max_power'))
car <- select(car, -c('engine', 'max_power'))
# Alternativa è creare una colonna di fattori 0 e 1 che indicano l'unità di misura
# Ma mi sembra un po' eccessivo dato il numero esiguo di unità statistiche
# Uso la funzione word della libreria dplyr
# la funzione add_column di tibble peraggiunge la nuova colonna dopo la colonna name
car <- add_column(car, make = factor(word(car$name, 1)), .after = "name")
# md.pattern (del pacchetto mice), è una funzione di visualizzazione molto utile
# Permette di vedere la distribuzione di NA
# nonchè di classificare le righe in funzione del numero di NA che contengono
md.pattern(car, rotate.names=TRUE)
#numero di righe con almeno un NA (coincide con quanto visto in md.pattern)
sum(!complete.cases(car))
#Trattandosi di 222 righe possiamo pensare di rimuoverle dato che costituiscono circa il 3% del dataset
car <- car[-which(!complete.cases(car)),]
class(car)
dim(car)
str(car)
summary(car)
# Estrazione delle variabili numeriche:
car_nums <- unlist(lapply(car, is.numeric))
# Prendo un campione di osservazioni per rendere più agile la rappresentazione grafica:
leggero <- car[sample(nrow(car), 500), ]
# Matrice dei diagrammi di dispersione:
pairs(leggero[, car_nums])
cor(car[ ,car_nums])
#istogrammi
par(mfrow=c(2,3))
for (i in names(car_num)) {
hist(car_num[[i]], xlab = i, main = '')
}
#istogrammi
par(mfrow=c(2,3))
for (i in names(car_nums)) {
hist(car_nums[[i]], xlab = i, main = '')
}
# Estrazione delle variabili numeriche:
car_nums <- unlist(lapply(car, is.numeric))
# Prendo un campione di osservazioni per rendere più agile la rappresentazione grafica:
leggero <- car[sample(nrow(car), 500), ]
# Matrice dei diagrammi di dispersione:
pairs(leggero[, car_nums])
cor(car[ ,car_nums])
# Estrazione delle variabili numeriche:
car_nums <- unlist(lapply(car, is.numeric))
car_nums_dataset <- select(car, car_nums)
# Estrazione delle variabili numeriche:
car_nums <- unlist(lapply(car, is.numeric))
car_nums_dataset <- select(car, names(car) == car_nums)
# Estrazione delle variabili numeriche:
car_nums_colnames <- unlist(lapply(car, is.numeric))
car_num <- car[ , car_nums_colnames]
# Prendo un campione di osservazioni per rendere più agile la rappresentazione grafica:
leggero <- car[sample(nrow(car), 500), ]
# Matrice dei diagrammi di dispersione:
pairs(leggero[, car_nums_colnames])
cor(car[ ,car_nums_colnames])
#istogrammi
par(mfrow=c(2,3))
for (i in names(car_num)) {
hist(car_num[[i]], xlab = i, main = '')
}
par(mfrow=c(1,1))
#istogrammi
par(mfrow=c(2,2))
for (i in c('selling_price','km_driven','engine(CC)','max_power(bhp)')) {
hist(log(car_nums[[i]]), xlab = i, main = '')
}
par(mfrow=c(1,1))
#istogrammi
par(mfrow=c(2,2))
for (i in c('selling_price','km_driven','engine(CC)','max_power(bhp)')) {
hist(log(car_num[[i]]), xlab = i, main = '')
}
par(mfrow=c(1,1))
#Boxplot
#par(mfrow=c(2,3))
summary(car_num)
for (i in names(car_num)) {
boxplot(car_num[[i]], xlab = i, main = '')
}
par(mfrow=c(1,1))
#Boxplot
#par(mfrow=c(2,3))
summary(car_num)
#for (i in names(car_num)) {
#  boxplot(car_num[[i]], xlab = i, main = '')
#}
#par(mfrow=c(1,1))
view(car)
#istogrammi
par(mfrow=c(2,3))
for (i in names(car_num)) {
hist(car_num[[i]], xlab = i, main = '')
}
par(mfrow=c(1,1))
#Boxplot
par(mfrow=c(2,3))
#summary(car_num)
for (i in names(car_num)) {
boxplot(car_num[[i]], xlab = i, main = '')
}
par(mfrow=c(1,1))
#istogrammi
par(mfrow=c(2,2))
for (i in c('selling_price','km_driven','engine(CC)','max_power(bhp)')) {
boxplot(log(car_num[[i]]), xlab = i, main = '')
}
par(mfrow=c(1,1))
#istogrammi
par(mfrow=c(2,2))
for (i in c('year','selling_price','km_driven','engine(CC)','max_power(bhp)')) {
hist(log(car_num[[i]]), xlab = i, main = '')
}
par(mfrow=c(1,1))
#istogrammi
par(mfrow=c(2,3))
for (i in c('year','selling_price','km_driven','engine(CC)','max_power(bhp)')) {
hist(log(car_num[[i]]), xlab = i, main = '')
}
par(mfrow=c(1,1))
